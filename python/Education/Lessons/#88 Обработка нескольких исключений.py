# Часто случается так, что нужно обработать несколько разных исключений, которые могут возникнуть при выполнении программы. Например, если сложение в прошлой программе заменить делением, то кроме ValueError может возникнуть исключениe ZeroDivisionError.

# Попробуйте запустить такую программу

# try:
#     a = int(input())
#     z = int(input())
#     div = a / z
#     print(div)
# except ValueError:
#     print("Вы ввели не число")    

    
# и введите вместо второго числа 0. Программа выдаст такую ошибку


# Traceback (most recent call last):
#   module __main__ line 8
#     except ValueError:
# ZeroDivisionError: division by zero

# Обработать такую ситуацию можно по‑разному. Во‑первых можно перечислить несколько исключений в скобках после except


# try:
#     a = int(input())
#     z = int(input())
#     div = a / z
#     print(div)
# except (ValueError, ZeroDivisionError):
#     print("Вы ввели не число")    

    
# Такая программа выведет на экран сообщение «Вы ввели не число» и в случае ошибочного ввода пользователем и при вводе нуля. И это, конечно, не совсем то, что нам нужно, ведь ноль — это число.

# Второй вариант обработки — это написать два блока except для двух разных исключений


# try:
#     a = int(input())
#     z = int(input())
#     div = a / z
#     print(div)
# except ValueError:
#     print("Вы ввели не число")
# except ZeroDivisionError:
#     print('Второе число не может быть нулем')

# Этот вариант для нашего случая намного лучше, так как для каждого типа ошибки мы выводим нужное и понятное сообщение для пользователя.

# Также обратите внимание, как выполняется программа в случае ошибок. Например, если ввести вместо первого числа какие‑либо буквы, второе число программа вводить уже не предложит и управление перейдет сразу в блок обработки ValueError.
