# Посмотрите внимательно на эту программу. Она повторяет программу из урока про обработку нескольких исключений. Ее единственное отличие, в том, что деление вынесено в отдельную функцию.

# И хотя деление находится в отдельной функции, исключение ZeroDivisionError все равно будет обработано

# def division(dividend, divider):
#     return dividend / divider

# try:
#     a = int(input())
#     z = int(input())
#     result = division(a, z)
#     print(result)
# except ValueError:
#     print("Вы ввели не число")
# except ZeroDivisionError:
#     print('Второе число не может быть нулем')

# Даже если в функции division был бы вызов еще одной функции, любое необработанное исключение «всплыло» бы вверх. Постарайтесь запомнить, что в ваш обработчик try ... except может попасть исключение из любых вызываемых функций, если исключения не было обработано внутри этих функций.

# Например, такая программа никогда не выведет на экран надпись «Второе число не может быть нулем»


# def division(dividend, divider):
#     try:
#         return dividend / divider
#     except ZeroDivisionError:
#         return 0

# try:
#     a = int(input())
#     z = int(input())
#     result = division(a, z)
#     print(result)
# except ValueError:
#     print("Вы ввели не число")
# except ZeroDivisionError:
#     print('Второе число не может быть нулем')


# Все потому, что исключение ZeroDivisionError обработано внутри функции division

# Вместо перечисления исключений можно обработать все возможные исключения разом. Для этого достаточно не указывать тип исключения после ключевого слова except.

# Попробуйте позапускать эту программу и ввести некорректные данные

# def division(dividend, divider):
#     return dividend / divider

# try:
#     a = int(input())
#     z = int(input())
#     result = division(a, z)
#     print(result)
# except:
#     print("Вы ошиблись")

# Какую бы вы ошибку не сделали, программа выведет на экран надпись

# Вы ошиблись

# Это может показаться удобным — меньше писанины. Однако, если обрабатывать исключения таким образом, в обработчик попадут абсолютно все исключения. Например, если вдруг операционная система не сможет выделить память программе, произойдет исключение MemoryError, ваш обработчик выведет сообщение об ошибке пользователя, а ведь пользователь совсем не виноват.

# На самом деле невозможно сделать правильно проверяемыми вообще все исключения, так как некоторые исключительные ситуации по своей природе таковы, что их возникновение возможно в любом или почти любом месте программы, а предотвратить их программист не в состоянии.

# В общем, стоит запомнить, что обрабатывать исключения предпочтительно явно. То есть нужно указывать тип исключения после ключевого слова except.

# Также запомните, что не стоит обрабатывать все исключения. Например, возникло исключение NameError. Это означает, что где‑то в программе используется несуществующая переменная и нужно определенно исправлять эту ошибку, а не писать обработчик.