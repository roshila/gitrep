# Менеджер контекста используется для оборачивания части программы на Python для гарантии, что критические функции выполнятся в любом случае, даже при возникновении непредвиденной ошибки.

# Для того, чтобы разобраться, как это работает, попробуйте запустить такую программу

# f = open('example.txt', 'w')
# f.write('Первая часть\n')
# user_data = int(input())
# f.write('Пользователь ввел {}'.format(user_data))
# f.close()
# Если пользователь введет строку, которую невозможно преобразовать в целое число, программа завершится с ошибкой. Следовательно, до вызова метода close дело не дойдет и файл не будет закрыт.

# В таких случаях можно обрабатывать каждую из возможных ошибок или же обернуть код в конструкцию try ... except, однако предпочтительнее использовать контекстный менеджер with ... as

# with open('example.txt', 'w') as f:
#     f.write('Первая часть\n')
#     user_data = int(input())
#     f.write('Пользователь ввел {}'.format(user_data))

# С использованием контекстного менеджера файл будет закрыт в любом случае, даже если произойдет ошибка. Вызывать метод close вместе с with ... as не нужно, так как он будет вызван контекстным менеджером автоматически.

# Попробуйте запустить эту программу и проверьте, что именно сохраняется в файл при разных введенных данных. Для того, чтобы увидеть изменения информации в файле, придется закрыть и открыть его заново в редакторе.

# Для того, чтобы пройти этот урок, напишите программу, которая записывает в любой файл любую информацию. Открытие файла для записи нужно сделать с помощью контекстного менеджера.

# # 1 
# name = input() + '.txt'
# info = input()

# with open(name, 'w') as f:
#     f.write(info + '\n') 
#     f.write(f'Сработал код без ошибок')

# # 2 
# file = input()
# with open(file,'w')as f:
#     f.write(input())

# # 3 
# def createFile(name, content):
#     with open(name, 'w') as x:
#         x.write(content)

# createFile(input('Таки назовите файл: '),
# input('''Запишите, в самом деле,
# инфу в созданный файл: '''))