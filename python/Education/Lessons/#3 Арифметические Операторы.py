# (1) Оператор присваивания "=" /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# Оператор присваивания "=" связывает имя переменной с её значением
#
# Пример .1.:
age = 22 # Мы ввели переменную age и присвоили ей значение 22
# имя переменной(левый операнд присваивания) - оператор присваивания - значение переменной(правый операнд присваивания)
print(age)
#
#
# (2) Оператор сложения "+" //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#
#
# Пример .1.:
a = 2 + 2 # Оператор сложения "+" складывает операнд слева от себя и справа от себя и возвращает в переменную результат сложения
b = a + 2 # Операнд может складывать переменные со значениями
c = a + b # И переменные с переменными
print(a , b , c) # Если программа работает только с числами то это не вызовет проблем (4 6 10)
# Если в качестве операндов выражения использованы только ЦЕЛЫЕ числа  то и результатом выполнения будет ЦЕЛОЕ число
#
# Пример .2.:
a = 5 + 5
b = str(a)
print('Результат=' + b) # Если операндами оператора сложения являются строки то они будут конкатенированы (Склеены) "Результат=10"
#
# Пример .3.:
a = 3
b = 2
a = a + b 
print(a)  # эту запись можно сократить / Результат 5
# 
# Пример .4.:
a = 3
b = 2 
a += b    # Сокращенная запись как задать переменной значение самой себя
print(a)  # Результат 5
#
#
# (3) Оператор вычитания "-"////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#
# Пример .1.:
a = 10 - 5 # Оператор вычитания "-" вычитает из операнда слева операнд справа и возвращает в переменную результат
print(a)   # Результатом будет 5
#
# Пример .2.:
a = 10 -5
b = a - 2  # Операндом вычитания также может быть переменная
print(b)   # Результат 3
#
# Пример .3.:
a = 10 - 5
b = 40 - 30
c = b - a  # Или оба операнда вычитания могут быть переменными
print(c)   # Результат 5
#
#
# (4) Оператор деления "/" //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#
# Пример .1.:
a = 10 / 2 # Оператор деления "/" делит операнд слева на операнд справа , в данном случае 10 будет разделено на 2
b = a / 2  # Оператор деления также как и другие арифметические операторы работает и с переменными
c = a / b  # Даже если оба операнда переменные
print(a , b , c) # Если значения переменных только вещественные числа то функция print() будет выполнена без проблем, поскольку все числовые значения при делении
# Оператор деления хоть и может работать с целыми числами, однако на выходе всегда будет преобразовывать их в ДРОБЬ, даже если все операнды ЦЕЛЫЕ
# преобразовываются в дробь и результатом выполнения print() будет 5.0 2.5 2.0
#
#
# (5) Оператор возведения в степень "**" /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#
# Пример .1.:
a = 5 ** 2 # Оператор возведения в степень "**" возводит левый операнд в степень , равную правому операнду 
print(a) # 5 * 5 = 25 
#
# Пример .2.:
a = 5 ** 2 
b = a ** 0.4 # По аналогии с прошлыми операторами, операндом может быть переменная
c = a ** b   # Или оба операнда могут быть переменными
print(a , b , c)  # Резульат через пробел :  25 3.6 116410.57
#
#
# (6) Деление по модулю "%" /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# 
# Пример .1.:
a = 12.5 % 2 # Оператор деления по модулю делит левый операнд на правый и возвращает остаток
print(a) # Полностью на 2 делится только 12, 12/2 = 6 , остаток 0.5 , который возвращается в переменную и выводится функцией print()
#
# Пример .2.:
a = 12.5 % 2
b = 15.5 % a # Это можно использовать с переменными, но в данном случае будут возвращены нули, потому что числа слишком малы
c = b % a
print(a , b , c)
#
#
# (7) целочисленное деление "//" //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#
# Пример .1.:
a = 12.5 // 2  # Оператор целочисленного деления "//" делит левый операнд на правый и возвращает только целое число от результата выполнения операции
print(a)       # Целое число при делении будет 6 , Результат 6
#
# 
# (8) Порядок выполнения арифметических операций
#
# Порядок выполнения арифметических операций аналогичен тому как это происходит в математике
a = 10.5 * 2
b = a + (a / 3)
c = (a + b ) * 2
print(a, b, c)
#
#
#

# Работа с комплексными числами
# Для создания комплексного числа можно использовать функцию complex(a, b), в которую, в качестве первого аргумента, передается действительная часть, 
# в качестве второго – мнимая. Либо записать число в виде  a + bj.
# Создание комплексного числа.
# >>> z = 1 + 2j
# >>> print(z)
# (1+2j)
# >>> x = complex(3, 2)
# >>> print(x)
# (3+2j)
# Комплексные числа можно складывать, вычитать, умножать, делить и возводить в степень.

# >>> x + z
# (4+4j)
# >>> x - z
# (2+0j)
# >>> x * z
# (-1+8j)
# >>> x / z
# (1.4-0.8j)
# >>> x ** z
# (-1.1122722036363393-0.012635185355335208j)
# >>> x ** 3
# (-9+46j)
# У комплексного числа можно извлечь действительную и мнимую части.

# >>> x = 3 + 2j
# >>> x.real
# 3.0
# >>> x.imag
# 2.0
# Для получения комплексносопряженного число необходимо использовать метод conjugate().

# >>> x.conjugate()
# (3-2j)
# Битовые операции
# В Python доступны битовые операции, их можно производить над целыми числами.

# Побитовое И (AND).

# >>> p = 9
# >>> q = 3
# >>> p & q
# 1
# Побитовое ИЛИ (OR).

# >>> p | q
# 11
# Побитовое Исключающее ИЛИ (XOR).

# >>> p ^ q
# 10
# Инверсия.

# >>> ~p
# -10
# Сдвиг вправо и влево.

# >>> p << 1
# 18
# >>> p >> 1
# 4
# Представление чисел в других системах счисления
# В своей повседневной жизни мы используем десятичную систему исчисления, но при программирования, очень часто, приходится работать с шестнадцатеричной, двоичной и восьмеричной.

# Представление числа в шестнадцатеричной системе

# >>> m = 124504
# >>> hex(m)
# '0x1e658'
# Представление числа в восьмеричной системе

# >>> oct(m)
# '0o363130'
# Представление числа в двоичной системе

# >>> bin(m)
# '0b11110011001011000'
# Библиотека (модуль) math
# В стандартную поставку Python входит библиотека math, в которой содержится большое количество часто используемых математических функций.

# Для работы с данным модулем его предварительно нужно импортировать.

# >>> import math
# Рассмотрим наиболее часто используемые функции.

# math.ceil(x)

# Возвращает ближайшее целое число большее, чем x.

# >>> math.ceil(3.2)
# 4
# math.fabs(x)

# Возвращает абсолютное значение числа.

# >>> math.fabs(-7)
# 7.0
# math.factorial(x)

# Вычисляет факториал x.

# >>> math.factorial(5)
# 120
# math.floor(x)

# Возвращает ближайшее целое число меньшее, чем x.

# >>> math.floor(3.2)
# 3
# math.exp(x)

# Вычисляет e**x.

# >>> math.exp(3)
# 20.085536923187668
# math.log2(x)

# Логарифм по основанию 2.

# math.log10(x)

# Логарифм по основанию 10.

# math.log(x[, base])

# По умолчанию вычисляет логарифм по основанию e, дополнительно можно указать основание логарифма.

# >>> math.log2(8)
# 3.0
# >>> math.log10(1000)
# 3.0
# >>> math.log(5)
# 1.6094379124341003
# >>> math.log(4, 8)
# 0.6666666666666667
# math.pow(x, y)

# Вычисляет значение x в степени y.

# >>> math.pow(3, 4)
# 81.0
# math.sqrt(x)

# Корень квадратный от x.

# >>> math.sqrt(25)
# 5.0
# Тригонометрические функции, их мы оставим без примера.

# math.cos(x)

# math.sin(x)

# math.tan(x)

# math.acos(x)

# math.asin(x)

# math.atan(x)

# И напоследок пару констант.

# math.pi

# Число пи.

# math.e

# Число е.