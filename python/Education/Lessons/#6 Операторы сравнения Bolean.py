# до этого урока я использовал оператор присваивания = чтобы связать имя переменной с её значением,но существуют и другие операторы///////////////////////////////////////
#
# (1) Оператор сравнения ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#
# Пример .1.:
a = 10 # Задаём переменную a= со значением 10 
print(a == 10) # Задаём функцию print() со значением a == 10 что дословно означает вопрос "а равно десяти?", если да то True, если нет то False
# Оператор сравнения "==" сравнивает значения операндов слева и справа и возвращает истину или ложь в функцию
#
# Пример .2.:
a = 11  # Задаём переменную a= со значением 11
print(a == 12) # False, a не равно 12, а равно 11
#
# (2) Булевые операторы сравнения //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#
# Пример .1.:
a = 10
print(a > 5) # Оператор сравнения ">" вернёт True если a больше 5, а = 10 , 10 больше 5 , результат True
#
# Пример .2.:
a = 15
print(a < 5) # Оператор сранения "<" вернёт True если а мееьшн 5, а = 15, 15 не меньше 5 , результат False
#
# Пример .3.:
a = 10
print(a !=5) # Оператор != означает: a не равно 5 , в данном примере а = 10, а не равно 5, результат True
# 
# Пример .4.:
a = 5
print(a != 5) # переменная а равна 5, оператор != вернёт False, поскольку условие а не равно 5 ложное, а=5
#
# Пример .5.:
a = 15
print(a >= 10) # Оператор >= означает больше либо равно, в данном примере если выполняется условие a больше либо равно 10 то результат True
# a = 15, 15 больше 10, результат True
#
# Пример .6.:
a = 10
print(a >= 10) # Результат True, a = 10
#
# Пример .7.:
a = 9
print(a >= 10) # Результат False, a меньше 10
#
# Пример .8.:
a = 10
print(a <= 11) # Аналогичный прошлому оператору, оператор <= меньше либо равно вернёт True если условие истинно
# В данном примере a = 10, 10 < 11 , Результата True
#
# Пример .9.:
a = 11
print(a <= 11) # True, a =11
#
# Пример 10:
a = 12
print(a <= 11) # False, a = 12, 12 не меньше 11
#
#
# (3) Преобразование целого числа в булевое значение
#
# Пример .1.:
a = bool(2) # С помощью функции bool() можно преобразовать целое число в булевое значение
print(a)
#
# Пример .2.:
a = bool(-1) # Любое число кроме нуля в булевом представлении данных означает истину True
print(a)
#
# Пример .3.:
a = bool(0) # И только 0 означаешь ложь False 
print(a)
#
# (4) Преобразование строки в булевое значение
#
# Пример .1.:
a = bool('some text') # Функция bool() может преобразовывать в булевые значение и строчный тип данных
print(a)
# 
# Пример .2.:
a = bool('')    # Любая НЕ ПУСТАЯ строка означает истину True, пустая строка означает ложь False 
print(a)
#
#
# (5) Условный оператор if в связке с булевыми значениями
# Булевые значения удобно можно использовать в связке с условными операторами
#
# Пример .1.:
a = 0  # Связываем переменную а со значением 0 , a = 0, ноль это ложь, a = False 
if a != 0:      # Если a истина (а тут а это ложь) то:
    print('Хорошо') # print('Хорошо')
#  Условие не выполняется потому что в значении переменной а хранится ложь, этот же пример можно записать короче
#
# Пример .2.:
a = 0
if a:   # Эта запись имеет аналогичный смысл что и в примере выше, но выглядит короче
    print('Хорошо') # В любом случае условие if не выполняется потому что в а хранится ложь
#
# Пример .3.:
b = ''  # Вспоминаем что пустая строка это ложь 
if b:   # для красоты кода теперь буду записывать так. Это по сути значит всегда одно и тоже, если в переменной а хранится истина то делать следующее
    print('не ложь')
#
# Пример .4.:
#
if a and b:
    print('Ничего') # Результатом отладки будет ничего, поскольку a и b ложь