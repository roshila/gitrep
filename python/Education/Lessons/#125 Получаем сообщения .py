
# Напишите вашему боту сообщение. Прямо из Telegram, найти вы его можете по имени (username), которое вы указывали при создании. После того, как напишете боту, запустите программу из прошлого урока еще раз. Вы должны увидеть что‑то вроде этого

# {'ok': True, 'result': [{'update_id': 399761507, 'message': {'message_id': 2, 'from': {'id': 125454804, 'is_bot': False, 'first_name': 'Sergey', 'last_name': 'Kotov', 'username': 'kotov_dev', 'language_code': 'en'}, 'chat': {'id': 125454804, 'first_name': 'Sergey', 'last_name': 'Kotov', 'username': 'kotov_dev', 'type': 'private'}, 'date': 1603456852, 'text': 'Привет, мой первый бот!'}}]}

# Напишите боту что‑нибудь еще и запустите программу еще раз.

# В список, находящийся по ключу 'result' добавился еще один словарь. Как вы уже поняли, этот список и есть сообщения, присланные боту.

# То есть, вместо вывода всего ответа на экран, можно вывести отдельно каждое сообщение. Измените и запустите свою программу еще раз. Не забудьте подставить свой
# import requests

# result = requests.get('Тут должен быть адрес для вашего бота')
# data = result.json()
# for update in data['result']:
#     print(update['message']['text'])
    
# Смотрите какая штука. Значение ключа 'result' — список. Каждый элемент этого списка — словарь. То есть в цикле каждую итерацию мы получаем очередной словарь. Каждый такой словарь имеет свои ключи. И по ключу 'message' находится еще один словарь, в котором мы наконец‑то можем найти текст сообщения. Получается, у нас есть этакий супер-словарь. С вложенными списками и словарями. Это может показаться сложным, но пугаться не стоит. Главное — понимать, в каком ключе и какая информация хранится.

# Прочитайте документацию, чтобы немного освоиться со всем этим.

# Во всех этих историях с API, документация — это самое главное. Заранее тут подготовиться нельзя, к тому же и API может со временем изменяться.
# https://tlgrm.ru/docs/bots/api#update