# Метод create_rectangle, возвращает числовой идентификатор нарисованного на холсте прямоугольника. По сути это просто число, с помощью которого можно изменять параметры прямоугольника после добавления на холст. Для изменения координат добавленных фигур, у холста есть метод coords.

# Скопируйте код этого примера, запустите его и посмотрите, в какой части экрана находится прямоугольник.
# import tkinter
# window = tkinter.Tk()
# canvas = tkinter.Canvas(window)
# canvas.pack()
# rect = canvas.create_rectangle(10, 10, 50, 50)
# window.mainloop()
# Добавьте перед вызовом mainloop вызов coords, запустите программу еще раз и посмотрите, что изменилось
# import tkinter
# window = tkinter.Tk()
# canvas = tkinter.Canvas(window)
# canvas.pack()
# rect = canvas.create_rectangle(10, 10, 50, 50)
# canvas.coords(rect, 50, 50, 150, 150)
# window.mainloop()
# Чтобы увидеть изменение координат прямоугольника наглядно, добавим паузу между добавлением прямоугольника и изменением его координат. Для этого импортируем модуль time в начале программы, а после создания прямоугольника на холсте добавим вызов time.sleep(2).
# import tkinter
# import time

# window = tkinter.Tk()
# canvas = tkinter.Canvas(window)
# canvas.pack()
# rect = canvas.create_rectangle(10, 10, 50, 50)
# time.sleep(2)
# canvas.coords(rect, 50, 50, 150, 150)
# window.mainloop()
# Запустите эту программу и убедитесь, что результат не совсем такой, как мы ожидали. Окно появляется только через две секунды. При этом мы не видим никакого изменения координат прямоугольника, визуально все выглядит так же, как и в прошлом примере.

# Дело в том, что отображение окна (и соответственно холста) у нас происходит только при вызове mainloop. Вызвать mainloop сразу после create_rectangle нельзя, потому что mainloop блокирует дальнейшее выполнение программы.

# К счастью, для того, чтобы выйти из ситуации, мы можем использовать метод update. Он обновит и покажет содержимое окна, но в отличие от mainloop после его вызова программа продолжит выполняться
# import tkinter
# import time

# window = tkinter.Tk()
# canvas = tkinter.Canvas(window)
# canvas.pack()

# rect = canvas.create_rectangle(10, 10, 50, 50)
# canvas.update()
# time.sleep(2)
# canvas.coords(rect, 50, 50, 100, 100)
# window.mainloop()
# При выполнении этой программы мы увидим прямоугольник сначала в одном месте, а через две секунды — в другом. Обязательно запустите эту программу и посмотрите, как она работает.
