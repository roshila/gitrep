# С помощью этого оператора можно узнать, содержит ли строка определенную подстроку.

# В любом языке программирования, подстрокой строки называют любую связанную непустую часть этой строки.

# Для примера возьмем строку «Привет». Так вот, «Пр», «При», «иве», «ивет» и даже «Привет» — это подстроки строки «Привет». А вот «Прве» уже нельзя назвать подстрокой, так как в ней две несвязанных части строки «Пр» и «ве».

# То есть, подстрока это как бы вырезанный кусок строки.

# Так вот, для того, чтобы узнать, есть ли подстрока в строке, как раз и используют оператор in. Чтобы все сработало как надо, сначала напишите подстроку, потом оператор in, а после него — строку
print("Пр" in "Привет")
print("ивет" in "Привет")
print("Прве" in "Привет")
# Разумеется, все сработает и с переменными
string = input("Введите строку")
substring = input("Введите подстроку")
if substring in string:
    print("Подстрока найдена")

#Поиск позиции подстроки
# Подстроку в строке можно искать не только с помощью оператора in. Как вы заметили, он позволяет установить только факт наличия подстроки в строке. Но что, если нужно узнать и позицию этой подстроки в строке?

# Для такого поиска подстроки в строке есть метод find. Подстрока для поиска — единственный аргумент для вызова этого метода. Результатом вызова find будет позиция, в которой Python первый раз нашел подстроку. Номера позиций начинаются с 0. Если подстрока не найдена, вызов find вернет −1.

# Программа, которую вы напишете в этом уроке, должна получить строку от пользователя с помощью input. Если в строке найден символ #, программа должна вывести часть строки до этого символа. Иначе — программа должна вывести на экран исходную строку.
x = input()
if '#' in x:
    print(x[:x.find('#')])
else:
    print(x)
string = input("Введите строку ")
print(string[:string.find('#')]) if "#" in string else print(string)