# Возможно вы заметили, что создание полей у объектов в прошлых уроках выглядит как‑то хлипко. Я имею в виду, что если мы, например, забудем присвоить коту имя, то при попытке вызвать метод ask_for_food мы, естественно, получим ошибку.
# class Cat:
#     def ask_for_food(self):
#         print('Хозяин, кот {} требует пищу'.format(self.name))

# fil = Cat()
# fil.ask_for_food()

# Программа выше вызовет ошибку AttributeError, так как мы обращаемся к полю, которого в объекте попросту нет.

# Такое вполне может случится, если коты создаются в разных местах программы или мы решили создать целую стаю котов. К тому же, некоторые поля наверняка захочется инициализировать при создании объекта какими‑то начальными значениями, чтобы не делать это каждый раз после создания
# class Cat:
#     pass

# fil = Cat()

# # создаем пустой список, чтобы в процессе выполнения 
# # программы добавлять неудачи в послужной список
# fil.fails = []
# В общем, если вы хотите присвоить какие‑либо значения полям объекта во время создания, нужно использовать специальный метод инициализации __init__. Как и для обычных методов объекта, первым параметром __init__ будет self. После него можно указать все аргументы, которые необходимы для создания объекта
# class Cat:
#     def __init__(self, name):
#         self.name = name

# fil = Cat('Филимон')
# Еще раз обратите внимание на то, что в определении метода у нас два аргумента, а при создании объекта мы передаем только один. Все точно так же, как и в обычных методах: объект self Python передаст нам автоматически.

# Так как методы — это те же самые функции, то мы можем указывать значение по умолчанию для аргументов. Например, вот так
# class Cat:
#     def __init__(self, name, is_fluffy=False):
#         self.name = name
#         self.is_fluffy = is_fluffy

# fil = Cat('Филимон')

# if not fil.is_fluffy:
#     print('Непушистый {}'.format(fil.name))

# И еще один важный момент. Аргументы метода инициализации (да и любого метода объекта на самом деле) никак не связаны с полями объекта. То есть self.name и name — разные переменные. И до тех пор, пока вы явно не присвоите self.name значение name, никакого поля у объекта, конечно же, не будет.

# Ну и разумеется, мы можем создавать поля для объекта вообще никак не связанные с аргументами метода __init__

# class Cat:
#     def __init__(self, name, is_fluffy=False):
#         self.name = name
#         self.is_fluffy = is_fluffy
#         self.fails = []