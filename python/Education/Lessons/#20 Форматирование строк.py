# Часто бывает нужно подставить в строку данные, полученные во время выполнения программы. Это может быть строка, введённая пользователем или какое‑то число, посчитанное программой.

# Такую подстановку можно сделать в лоб с помощью конкатенации. Вы уже делали это в мини-калькуляторе: склеивали строку «Сумма=» и результат сложения чисел.

# На практике это не очень удобно, если вы хотите вывести на экран не просто сумму, но и входные данные. Даже в такой простой программе уже можно запутаться:
# a = 10
# b = 3
# c = a + b
# result = str(a) + "+" + str(b) + "=" + str(c)
# print(result)
# Если же это будет что‑то более сложное, строка превратится в нечитаемую мешанину из кавычек, операторов и функций str.

# Чтобы сделать подстановки более читаемыми, в Python есть несколько различных способов. И первый из них — это %-форматирование
# a = 10
# b = 3
# c = a + b
# result = "%d+%d=%d" % (a, b, c)
# print(result)
# Как вы наверняка догадались, все встреченные %d будут заменены на значения переменных a, b и c. Символ % указывает на то, что в эту позицию строки нужно подставить значение очередной переменной, а символ после этого знака задает тип переменной. d — это целое число. Если типы не будут совпадать, программа завершится с ошибкой
# digit = 1
# string = "Номер"
# result = "%d %d" % (digit, string)
# print(result)
# Чтобы все сработало как надо, для строк нужно использовать символ s.
# digit = 1
# string = "Номер"
# result = "%d %s" % (digit, string)
# print(result)
# На самом деле возможностей у этого способа подстановки гораздо больше. Можно, например, задавать точность, с которой будет подставлено число. К тому же можно использовать типы данных, о которых вы пока еще ничего не знаете.

# Вообще этот способ считается устаревшим, поэтому сильно в него углубляться не будем. Просто знайте, что такой способ есть и его вполне можно встретить в чужом исходном коде. Мы же рассмотрим более предпочтительные способы форматирования строк.