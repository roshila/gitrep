# # Оператор break прерывает выполнение цикла. Часть кода итерации до оператора break будет выполнена, а часть после — нет. Использовать break можно только внутри тела цикла.

# # В прошлом уроке вы, скорее всего, написали что‑то похожее:
# # string = input()
# # i = 0
# # while i < len(string):
# #     print(string[i])
# #     i = i + 1
# #     Но что, если надо останавливать цикл, если в строке встретится символ #?

# # Можно добавить условие в сам цикл while:
# # string = input()
# # i = 0
# # while i < len(string) and string[i] != '#':
# #     print(string[i])
# #     i = i + 1

# # А можно добавить выход из цикла с помощью оператора break:
# # string = input()
# # i = 0
# # while i < len(string):
# #     if string[i] == '#':
# #         break
# #     print(string[i])
# #     i = i + 1

# # Код с оператором break, как правило, выглядит изящнее, чем прописывание условий в операторе while. Однако, в каждом отдельном случае, вам придется решать, использовать break или нет.
# Задача с выходом из цикла
# Напишите программу, в которой переменной string присвоено значение, введённое пользователем. Тип переменной string — строка.

# Программа должна вывести каждую букву переменной string на новой строке, используя цикл while. Если в строке встретятся два символа # подряд, цикл должен быть остановлен с помощью оператора break.

# То есть, если пользователь ввёл «Привет, ##Василий», программа должна вывести только:
# П
# р
# и
# в
# е
# т
# ,
# string = input()
# i = 0
# br = string.find("##")

# while i < len(string):
#     if i != br:
#         print(string[i])
#         i += 1
#     else: 
#         break

# string = input()
# while len(string) != 0:
#     if '##' in string[:2]:
#         break
#     else:
#         print(string[0])
#         string = string[1:]
# string = input("Введите текст")
# i = 0
# while i < len(string):
#     if string[i] == "#":
#         if i + 1 < len(string) and string[i + 1] == "#":
#             break
#     print(string[i])
#     i += 1