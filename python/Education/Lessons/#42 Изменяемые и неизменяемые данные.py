# Кроме разных методов, у строк и списков есть еще одно важное отличие. Если попробовать выполнить такой код в надежде исправить слово «Хобот» на «Робот»,

# string = 'Хобот'
# string[0] = 'Р'
# print(string)
# Питон выдаст ошибку о том, что строка не поддерживает назначение элементов


# Если же аналогичное действие попытаться провернуть со списком, все будет хорошо и эта программа
# arr = [1, 2, 3, 4]
# arr[0] = "Замена"
# print(arr)
# выведет на экран
# ['Замена', 2, 3, 4]
# Получается, что список — это изменяемая коллекция, а строка — неизменяемая.

# Может возникнуть вопрос, почему сделано именно так? Не проще ли, чтобы изменение символа в строке по индексу было реализовано так же, как изменение элемента списка?

# Во‑первых, это эффективно. Область памяти выделяется при создании строки и никогда не изменяется. Это делает обработку строк интерпретатором быстрее. А так как строк в программах, как правило, больше, чем списков, это дает ощутимый выигрыш.

# Во‑вторых, неизменяемость строки и восприятие ее как единого целого, позволяет использовать строки в качестве ключей словаря. Об этой структуре данных будет рассказано в следующем разделе.

# В любом случае, если все же понадобится заменить букву в строке, это можно сделать либо с помощью replace
# string = 'Хобот'
# string = string.replace("Х", "Р")
# print(string)
# либо с помощью среза
# string = 'Хобот'
# string = "Р" + string[1:]
# print(string)
# В этих примерах мы не изменяем строку, а создаем новую со старым именем.