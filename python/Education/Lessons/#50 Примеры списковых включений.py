# Список квадратов чисел от 1 до 5
# squares = [x * x for x in (1, 2, 3, 4, 5)]
# Все фрукты, в которых есть буква «а»
# fruits = ["яблоко", "банан", "вишня", "киви", "манго"]
# filtered_fruits = [x for x in fruits if "а" in x]
# Список цен со скидкой
# original_prices = [100, 200, 500, 1100]
# discount = 0.15  # 15%
# new_prices = [i * (1 - discount) for i in original_prices]
# print(new_prices)
# Тернарный оператор как выражение для обработки элемента
# text = 'Сколько лет, сколько зим'
# parts = ['*' if i == 'о' else i for i in text]
# new_text = ''.join(parts)
# print(new_text)
# Списковые выражения можно передавать в качестве аргументов методам и функциям,
# text = 'Сколько лет, сколько зим'
# new_text = ''.join(['*' if i == 'о' else i for i in text])
# print(new_text)
# Списковые выражения — удобная синтаксическая конструкция для решения определенных задач. Однако, не стоит применять их везде и всюду. Помните, что читаемость программы очень важна. И если применение спискового включения ухудшает ее — лучше его не использовать.
