# Как и у строк, с помощью методов со списками можно делать всякие полезные действия. Но есть одно глобальное отличие. Методы обработки строк, например upper или lower, возвращают новую строку. То есть для получения результата мы должны были сделать так:

# string = string.upper()
# То есть присвоить переменной результат вызова метода.

# С некоторыми методами списка этого делать не нужно, так как они изменяют исходный список. Примером такого метода может быть метод sort. Такая программа
# list_ = [5, 2, 3, 0, 1]
# list_.sort()
# print(list_)
# выведет на экран


# [0, 1, 2, 3, 5]
# То есть метод sort отсортирует исходный список list_, изменив саму переменную list_.

# Если же попробовать вывести на экран значение, которое возвращает метод sort
# list_ = [5, 2, 3, 0, 1]
# result = list_.sort()
# print(result)
# на экран будет выведено
# None
# так как метод sort ничего не возвращает.
# Некоторые методы списков могут как изменять список, так и возвращать значения. Чтобы представлять, какие методы есть у списков и как они работают, не поленитесь просмотреть справочник. К тому же, в следующем уроке один из методов пригодится для решения задачи.
# https://letpy.com/handbook/list-methods/