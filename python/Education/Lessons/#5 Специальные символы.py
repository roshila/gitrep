# В питоне существует ряд специальных символов для упрощения написания кода, например
#
# (1) Ковычки /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
# 
# Предположим в значении переменной нужно указать двойную "" или одинарные '' ковычки. Для этого можно использовать несколько способов:
#
# Пример .1.:
a = 'Строка с двойной" ковычкой' # В этом способе я указал двойную ковычку просто в коде, если ковычки разные то этот код даже сработает, даже без ошибок
print(a)
#
# Пример .2.:
a = "Строка с ' одинарной ковычкой" # С одинарной ковычкой это тоже работает, если ковычки разных типов то ошибок не будет
print(a)
# Но что если нужно задать оба типы ковычек в значении переменной? Этот метод не будет работать и вызовет ошибку
#
# Пример .3.:
a = 'Строка с \' одинарной ковычкой, с \" двойной ковычкой' # Специальный символ \ помогает отобразить ковычки в коде
print(a) # Использование обратного слэша для отображения ковычек называется экранированием
#
# (2) Обратный слэш /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#
# Если нам потребуется отобразить в значении элемента обратный слэш то можно использовать специальный символ \\
#
# Пример .1.:
a = 'Строка с \" двойной ковычкой, с \' одинарной ковычкой и с \\ обратным слэшем'
print(a)
#
# (3) Перенос строки ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#
# Если в значении переменной нужно сделать перенос строки то сделать это можно несколькими способами
#
# Пример .1.:
a = 'Значение переменной с \n переносом строки' # Специальный символ \n делает разрыв строки и дальнейший текст будет начат с новой строки
print(a)
#
# Пример .2.:
a = 'Значение с \nПереносом строки' # если между специальным символом \n и текстом после него не будет стоять пробела то текст отобразится без отступов с начала строки
# В примере .1. текст после переноса строки будет отображён с одним пробелом
print(a)
# 
# Пример .3.:
a = 'Значение с\nПереносом строки' # Если перед \n не будет стоять пробела то это никак не отобразится на внешнем виде 
print(a)
#
# Пример .4.:
a = """Первая строка #
Вторая строка""" # Перенос строки также можно сделать с помощью специального символа """.""", однако в таком случае
# в первой строке нельзя написать комментарий ,он будет распознан как часть строки
print(a)
#
# Пример .5.:
a = '''Первая строка #
Вторая строка''' # Аналогично работает и с одной ковычкой
print(a)
